generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  name           String
  password       String
  phone          String?
  address        String?
  deliveryMethod DeliveryMethod?
  status         Boolean         @default(true)

  orders Order[]
  roles  RoleEnum[]

  Business   Business @relation(fields: [businessId], references: [id])
  businessId String

  rolesAssigned UserRole[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessId])
}

model UserRole {
  id        String   @id @default(uuid())
  role      RoleEnum
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Business {
  id          String   @id @default(uuid())
  name        String
  description String
  address     String
  phone       String
  email       String   @unique
  logo        String?
  colors      String[]
  redes       String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products     Product[]
  users        User[]
  OpeningHours OpeningHours[]
  Order        Order[]
  Category     Category[]
}

model OpeningHours {
  id         String    @id @default(uuid())
  dayOfWeek  DayOfWeek
  openTime   String
  closeTime  String
  Business   Business  @relation(fields: [businessId], references: [id])
  businessId String
  holiday    Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id         Int     @id @default(autoincrement())
  name       String
  status     Boolean @default(true)
  businessId String

  business Business  @relation(fields: [businessId], references: [id])
  products Product[]

  @@unique([name, businessId])
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  price       Int
  image       String
  asset       Boolean @default(true)
  status      Boolean @default(true)

  Business   Business? @relation(fields: [businessId], references: [id])
  businessId String?

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@index([status])
  @@index([asset])
}

model Order {
  id             String      @id @default(uuid())
  totalAmount    Float
  totalItems     Int
  status         OrderStatus
  paid           Boolean     @default(false)
  paidAt         DateTime?
  stripeChargeId String?
  createdAt      DateTime    @default(now())
  updateAt       DateTime    @updatedAt

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  guestName      String?
  guestPhone     String?
  guestAddress   String?
  deliveryMethod DeliveryMethod

  orderNumber Int @default(autoincrement())

  OrderItem          OrderItem[]
  OrderReceipt       OrderReceipt?
  OrderStatusHistory OrderStatusHistory[]
  Business           Business?            @relation(fields: [businessId], references: [id])
  businessId         String?

  @@index([status])
  @@index([userId])
  @@index([orderNumber]) // Índice para garantizar que el número de orden sea único por negocio
}

model OrderItem {
  id        String @id @default(uuid())
  productId Int
  quantity  Int
  price     Float

  Order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?

  @@index([orderId])
}

model OrderReceipt {
  id String @id @default(uuid())

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique

  receiptUrl String

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model OrderStatusHistory {
  id        String      @id @default(uuid())
  orderId   String
  status    OrderStatus
  changedAt DateTime    @default(now())
  changedBy String?
  order     Order       @relation(fields: [orderId], references: [id])
}

enum OrderStatus {
  PENDING
  PAID
  DELIVERED
  CANCELLED
}

enum RoleEnum {
  DESARROLLADOR
  ADMINISTRADOR
  CAJA
  COCINA
  CADETE
  USER
}

enum DeliveryMethod {
  PICKUP
  DELIVERY
}

enum DayOfWeek {
  LUNES
  MARTES
  MIERCOLES
  JUEVES
  VIERNES
  SABADO
  DOMINGO
}
